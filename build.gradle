apply plugin: 'java'

def testRoot = "src/test/automationtests"

group = 'bottlerocketstuidos.automation'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

/*sourceSets {
    smokeTestAndroid {
            //java.srcDir file('src/test/automationtests/smokeTest/android/')
        java.srcDirs 'src/integration-test/java'
    }
*//*    smokeTestGeneral {
        srcDir testRoot + '/smoketest/general'
    }
    smokeTestIos {
        java.srcDir file(testRoot + '/smoketest/ios')
    }*//*
}*/

ext{
    aweFlavor = "framework"
}

test {
    String uniqueFolder = "../automation_test_results/awe_framework/" + getFilterFolderName() + "/" + getDate() + "_" + project.gradle.startParameter.taskNames

    useTestNG {
        //suites 'src/test/java/smoketest/awe_smoke_test.xml'
        useDefaultListeners = true
        //Use the unique name and the task name to create the folder
        reports.html.destination = file(uniqueFolder)
    }

    String deviceID = project.project.ext.properties.deviceid

    //Set these properties if they exist
    if(deviceID != null){
        systemProperty "automation." + (String)aweFlavor + ".deviceid", project.getProperty("deviceid")
        println("There was a device ID passed to gradle with the value: " + deviceID)
    }

    String port = project.project.project.ext.properties.port
    if(port != null){
        systemProperty "automation." + (String)aweFlavor + ".port", project.getProperty("port")
        println("There was a port passed to gradle with the value: " + port)
    }

    systemProperty "automation." + (String)aweFlavor + ".uniquefolder", uniqueFolder
    systemProperty "automation." + (String)aweFlavor + ".usegradlevalues","true"

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " logged: " + event.message )
    }
}

/*task smokeTestIos (type : Test) {
    println "Test dir before: " + getTestClassesDir()
    println "Classpath " + sourceSets.smokeTestIos.runtimeClasspath
    println "Out dir" + sourceSets.smokeTestIos.output.classesDir
    testClassesDir = sourceSets.smokeTestIos.output.classesDir
    println "Test dir after: " + getTestClassesDir()
}*/

/*task smokeTestAndroid (type : Test) {
    println "Looking for tests in : " + sourceSets.smokeTestAndroid.output.classesDir
    testClassesDir = sourceSets.smokeTestAndroid.output.classesDir
    classpath = sourceSets.smokeTestAndroid.runtimeClasspath
}*/

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('MM_dd_yyyy HH_mm_ss a')
    return formattedDate
}

static def getFilterFolderName() {
    def date = new Date()
    def month = date.format('MMMM_yy')
    return month
}

/* For later research
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}
*/


dependencies {
    compile project(':automation_library')
    compile group: 'io.appium', name: 'java-client', version:'3.4.0'
    //This isn't necessary since it comes included in Intellij, but unfortunately every time you synchronize the build.gradle you must tell it to add to the classpath again and it gets annoying
    compile group: 'org.testng', name: 'testng', version:'6.8.8'
}
