apply plugin: 'java'

def testRoot = "src/test/automationtests"

group = 'bottlerocketstuidos.automation'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def getArtifactoryIdentityField(field, index) {
    //Default to global setting
    if (project.hasProperty(field)) {
        return project.ext[field]
    }

    //Use environment secure credential variable on Jenkins
    def split_values = project.ext.artifactory_credentials.split(':')
    if (split_values.size() > index && split_values[index] != null) {
        return split_values[index]
    }
    logger.log(LogLevel.WARN, "Could not find artifactory identity field " + field)
    return ''
}

def getArtifactoryUser() {
    return getArtifactoryIdentityField('artifatory.username', 0)
}

def getArtifactoryPassword() {
    return getArtifactoryIdentityField('artifactory.password', 1)
}

repositories {
    mavenCentral()

    maven {
        url "https://artifacts.bottlerocketservices.com/repository/qa"
        credentials {
            username getArtifactoryUser()
            password getArtifactoryPassword()
        }
    }
}

ext{
    projectName = "DEFINE_PROJECT_NAME_HERE"
}

test {
    String uniqueFolder = "../automation_test_results/" + (String)projectName + "/" + getFilterFolderName() + "/" + getTime() + "_" + project.gradle.startParameter.taskNames

    useTestNG {
        //suites 'src/test/java/smoketest/awe_smoke_test.xml'
        useDefaultListeners = true
        //Use the unique name and the task name to create the folder
        reports.html.destination = file(uniqueFolder)
    }

    String deviceID = project.project.ext.properties.deviceid

    filter {
        includeTestsMatching "automationtests.smoketest.android.*"
        includeTestsMatching "automationtests.smoketest.general.*"
    }

    //Set these properties if they exist
    if(deviceID != null){
        systemProperty "automation." + (String)projectName + ".deviceid", project.getProperty("deviceid")
        println("There was a device ID passed to gradle with the value: " + deviceID)
    }

    String port = project.project.project.ext.properties.port
    if(port != null){
        systemProperty "automation." + (String)projectName + ".port", project.getProperty("port")
        println("There was a port passed to gradle with the value: " + port)
    }

    systemProperty "automation." + (String)projectName + ".uniquefolder", uniqueFolder
    systemProperty "automation." + (String)projectName + ".usegradlevalues","true"

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " logged: " + event.message )
    }
}

static def getTime() {
    def date = new Date()
    def formattedDate = date.format('HH_mm_ss_a')
    return formattedDate
}

static def getFilterFolderName() {
    def date = new Date()
    def month = date.format('MMMM_yy')
    def day = date.format('d')
    return month + "/" + day
}


dependencies {
    compile group: 'com.bottlerocketstudios.automation', name: 'Automation_Library', version: '1.0-SNAPSHOT'
    compile group: 'io.appium', name: 'java-client', version:'3.4.0'
    //This isn't necessary since it comes included in Intellij, but unfortunately every time you synchronize the build.gradle you must tell it to add to the classpath again and it gets annoying
    compile group: 'org.testng', name: 'testng', version:'6.8.8'
    // https://mvnrepository.com/artifact/com.relevantcodes/extentreports
    compile group: 'com.relevantcodes', name: 'extentreports', version: '2.41.1'
}
