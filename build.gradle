plugins {
    // id "org.gradle.test-retry" version "1.1.5"
    id "java"
    // id "io.qameta.allure" version "2.8.1"
}

def testRoot = "src/test/automationtests"

group = 'bottlerocketstuidos.automation'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 15
targetCompatibility = 15

repositories {
    mavenCentral()
    maven {
        url "file://Volumes/Builds/qa/automation/maven-repository/snapshots"
    }
    maven {
        url "file://Volumes/Builds/qa/automation/maven-repository/releases"
    }
}

ext{
    projectName = "DEFINE_PROJECT_NAME_HERE"
}

test {
    String operatingSystem = project.project.ext.properties.operatingsystem

    if(operatingSystem != null){
        systemProperty "automation." + (String)projectName + ".operatingsystem", project.getProperty("operatingsystem")
        println("There was an OS passed to gradle with the value: " + operatingSystem)
    }
    else {
        Properties props = new Properties()
        props.load(new FileInputStream((String) getProjectDir() + "/src/main/resources/appconfig.properties"))
        operatingSystem = props.get("PLATFORM_NAME")
        println("No operating system passed through gradle. Previously set operating system will be used.")
    }

    String date = project.project.ext.properties.date

    if(date != null){
        println("Using passed in gradle date for report location with the value: " + date)
    }
    else {
        date = getDate() + "/" + getTimeOfDay()
    }

    String folderBase = "../automation_test_results/" + (String)projectName + "_" + operatingSystem + "/"
    String uniqueFolder = folderBase + date //+ "_" + project.gradle.startParameter.taskNames

    useTestNG {
        useDefaultListeners = true
        //Use the unique name and the task name to create the folder
        //reports.html.destination = file(uniqueFolder)
    }

    String deviceID = project.project.ext.properties.deviceid

    //Set these properties if they exist
    if(deviceID != null){
        systemProperty "automation." + (String)projectName + ".deviceid", project.getProperty("deviceid")
        println("There was a device ID passed to gradle with the value: " + deviceID)
    }

    String port = project.project.project.ext.properties.port
    if(port != null){
        systemProperty "automation." + (String)projectName + ".port", project.getProperty("port")
        println("There was a port passed to gradle with the value: " + port)
    }

    String browserName = project.project.ext.properties.browser
    if(browserName != null){
        systemProperty "automation." + (String)projectName + ".browser", project.getProperty("browser")
        println("Using passed in gradle browser for running with the value: " + browserName)
    }
    systemProperty "automation." + (String)projectName + ".uniquefolder", uniqueFolder
    systemProperty "automation." + (String)projectName + ".usegradlevalues","true"

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " logged: " + event.message )
    }
}

static def getTimeOfDay() {
    def date = new Date()
    def formattedDate = date.format('HH_mm_ss_a')
    return formattedDate
}

static def getDate() {
    def date = new Date()
    def month = date.format('MMMM_yy')
    def day = date.format('d')
    return month + "/" + day
}


dependencies {
    implementation 'org.testng:testng:7.1.0'

    //active development framework
    implementation group: 'com.bottlerocket.automation', name: 'automation_library', version: '2.2.1-SNAPSHOT'
    implementation group: 'com.bottlerocket.automation', name: 'automation_library', version: '2.2.1-SNAPSHOT-sources'

    //stable release framework
    //implementation group: 'com.bottlerocket.automation', name: 'automation_library', version: '2.2-RELEASE'
    //implementation group: 'com.bottlerocket.automation', name: 'automation_library', version: '2.2-RELEASE-sources'

    implementation group: 'io.appium', name: 'java-client', version:'6.1.0'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.14.0'
    //This isn't necessary since it comes included in Intellij, but unfortunately every time you synchronize the build.gradle you must tell it to add to the classpath again and it gets annoying
    // https://mvnrepository.com/artifact/com.relevantcodes/extentreports
    implementation group: 'com.aventstack', name: 'extentreports', version: '4.0.5'
}
